/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jnix.h>
/* Header for class org_opensc_pkcs11_wrap_PKCS11Slot */

#ifndef _Included_org_opensc_pkcs11_wrap_PKCS11Slot
#define _Included_org_opensc_pkcs11_wrap_PKCS11Slot
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    initSlotNative
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_initSlotNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    destroySlotNative
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_destroySlotNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    initTokenNative
 * Signature: (JJ[B[B)V
 */
JNIEXPORT void JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_initTokenNative)
  (JNIEnv *, jobject, jlong, jlong, jbyteArray, jbyteArray);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    enumerateSlotsNative
 * Signature: (J)[J
 */
JNIEXPORT jlongArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_enumerateSlotsNative)
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    waitForSlotNative
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_waitForSlotNative)
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    isTokenPresentNative
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_isTokenPresentNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    isRemovableDeviceNative
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_isRemovableDeviceNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    isHardwareDeviceNative
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_isHardwareDeviceNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getManufacturerNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getManufacturerNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getDescriptionNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getDescriptionNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getHardwareVersionNative
 * Signature: (JJ)D
 */
JNIEXPORT jdouble JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getHardwareVersionNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getFirmwareVersionNative
 * Signature: (JJ)D
 */
JNIEXPORT jdouble JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getFirmwareVersionNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getMechanismsNative
 * Signature: (JJ)[Lorg/opensc/pkcs11/wrap/PKCS11Mechanism;
 */
JNIEXPORT jobjectArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getMechanismsNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenLabelNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenLabelNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenManufacturerNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenManufacturerNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenModelNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenModelNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenSerialNumberNative
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenSerialNumberNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenMinPinLenNative
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenMinPinLenNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    getTokenMaxPinLenNative
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_getTokenMaxPinLenNative)
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_opensc_pkcs11_wrap_PKCS11Slot
 * Method:    hasTokenProtectedAuthPathNative
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL JNIX_FUNC_NAME(Java_org_opensc_pkcs11_wrap_PKCS11Slot_hasTokenProtectedAuthPathNative)
  (JNIEnv *, jobject, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
